package org.younginhambak.backend.gallery.service;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.assertj.core.api.Assertions;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.annotation.Rollback;import org.springframework.transaction.annotation.Transactional;import org.younginhambak.backend.gallery.dto.PhotoCreateRequest;import org.younginhambak.backend.gallery.dto.PhotoDetailResponse;import org.younginhambak.backend.gallery.dto.PhotoUpdateRequest;import org.younginhambak.backend.gallery.entity.Photo;import org.younginhambak.backend.gallery.entity.PhotoStatus;import java.time.LocalDateTime;import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;import static org.assertj.core.api.Assertions.*;import static org.junit.jupiter.api.Assertions.*;@SpringBootTest@Transactional@Slf4jclass PhotoServiceImplTest {  @Autowired PhotoService photoService;  @Test  void readPhoto() {  }  @Test  void readPhotos() {    PhotoDetailResponse photoDetailResponse = photoService.readPhoto(7L);    List<String> tagNames = photoDetailResponse.getTagNames();    String join = String.join(", ", tagNames);    log.info("read : {}", join);  }  @Test  @Rollback(false)  void createPhoto() {    //given    List<String> tagList = Arrays.asList("tag1", "tag2", "tag3");    PhotoCreateRequest createRequest = PhotoCreateRequest.builder()            .creatorMemberId(1L)            .title("test")            .description("test")            .photographer("author")            .takenAt(LocalDateTime.now())            .tagNames(tagList)            .fileId(1L)            .build();    //when    Long id = photoService.createPhoto(createRequest);    //then    Photo photo = photoService.getPhoto(id).orElseThrow();    assertThat(photo.getStatus()).isEqualTo(PhotoStatus.ACTIVE);    assertThat(photo.getTagNames()).containsAll(tagList);  }  @Test  @Rollback(false)  void updatePhoto() {    //given    List<String> tagList = Arrays.asList("tag1", "tag3", "tag5");    PhotoUpdateRequest updateRequest = PhotoUpdateRequest.builder()            .title("update")            .description("update")            .photographer("update")            .takenAt(LocalDateTime.now())            .tagNames(tagList)            .build();    photoService.updatePhoto(1L, updateRequest);    Photo photo = photoService.getPhoto(1L).orElseThrow();    assertThat(photo.getTagNames()).containsExactlyInAnyOrderElementsOf(tagList);    String logs = String.join(", ", photo.getTagNames());    log.info("{}", logs);  }  @Test  @Rollback(value = false)  void deletePhoto() {    photoService.deletePhoto(1L);  }}